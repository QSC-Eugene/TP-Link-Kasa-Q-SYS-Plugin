PluginInfo = {
  Name = "TP-Link Kasa Local TCP",
  Author = "Eugene Dunn",
  BuildVersion = "0.1.0.10",
  Version = "0.1",
  Id = "d71cb671-6e0a-4a35-9ca4-20a247089870",
  Description = ""
}
local Colors = {
  White = {255, 255, 255},
  Black = {0, 0, 0},
  Red = {255, 0, 0},
  Green = {0, 255, 0},
  Blue = {0, 0, 255},
  Gray = {136, 136, 136},
  LightGray = {51,51,51},
  KasaBlue = {74,203,214},
  PluginColor = {74,203,214}
}

local MaxDevices = 24

-- Define the color of the plugin object in the design
function GetColor(props)
  return Colors.PluginColor
end

-- The name that will initially display when dragged into a design
function GetPrettyName(props)
  return PluginInfo.Name .. "\r" .. PluginInfo.BuildVersion
  -- return "Vaddio" .. props["Model"].Value .. " " .. PluginInfo.Version
end

-- Optional function used if plugin has multiple pages
PageNames = {"Setup"} --List the pages within the plugin
function PopulatePageNames(props)
  for x = 1, props["Number Of Devices"].Value do
    table.insert(PageNames, "Device " .. x)
  end
end

function GetPages(props)
  local pages = {}
  PopulatePageNames(props)
  for ix,name in ipairs(PageNames) do
    table.insert(pages, {name = PageNames[ix]})
  end
  return pages
end

-- Define User configurable Properties of the plugin
function GetProperties()
  local props = {}
  table.insert (
    props,
    {
      Name = "Number Of Devices",
      Type = "integer",
      Min = 1,
      Max = MaxDevices,
      Value = 1
    }
  )
  return props
end

-- Optional function to define pins on the plugin that are not connected to a Control
function GetPins(props)
  local pins = {}
  return pins
end

-- Optional function to update available properties when properties are altered by the user
function RectifyProperties(props)
  return props
end

-- Optional function to define components used within the plugin
function GetComponents(props)
  local components = {}
  return components
end

-- Optional function to define wiring of components used within the plugin
function GetWiring(props)
  local wiring = {}
  return wiring
end

-- Defines the Controls used within the plugin
function GetControls(props)
  local ctrls = {}
  -- table.insert(ctrls,{Name = "code",ControlType = "Text",PinStyle = "Input",Count = 1})
  
  NumberOfDevices = props["Number Of Devices"].Value
  
  table.insert(
    ctrls,
    {
      Name = "Discover",
      ControlType = "Button",
      ButtonType = "Trigger",
      PinStyle = "Input",
      UserPin = true
    }
  )
  
  table.insert(
    ctrls,
    {
      Name = "Discovered Devices",
      ControlType = "Indicator",
      IndicatorType = "Text",
      PinStyle = "Output",
      UserPin = true
    }
  )
  
  for d = 1, NumberOfDevices do
    table.insert(
      ctrls,
      {
        Name = "Device_" .. d .. "_IP",
        ControlType = "Text",
        PinStyle = "Both",
        UserPin = true
      }
    )
    table.insert(
      ctrls,
      {
        Name = "Device_" .. d .. "_Status",
        ControlType = "Indicator",
        IndicatorType = "Status",
        PinStyle = "Output",
        UserPin = true
      }
    )
    table.insert(
      ctrls,
      {
        Name = "Device_" .. d .. "_On",
        ControlType = "Button",
        ButtonType = "Toggle",
        PinStyle = "Both",
        UserPin = true
      }
    )
    table.insert(
      ctrls,
      {
        Name = "Device_" .. d .. "_Off",
        ControlType = "Button",
        ButtonType = "Toggle",
        PinStyle = "Both",
        UserPin = true
      }
    )
    table.insert(
      ctrls,
      {
        Name = "Device_" .. d .. "_Brightness",
        ControlType = "Knob",
        ControlUnit = "Percent",
        Min = 0,
        Max = 100,
        PinStyle = "Both",
        UserPin = true
      }
    )
    table.insert(
      ctrls,
      {
        Name = "Device_" .. d .. "_Name",
        ControlType = "Indicator",
        IndicatorType = "Text",
        PinStyle = "Output",
        UserPin = true
      }
    )
  end
  return ctrls
end

--Layout of controls and graphics for the plugin UI to display
function GetControlLayout(props)
  local layout = {}
  local graphics = {}
  -- layout["code"] = {PrettyName = "Code",Style = "None"}
  
  local x, y = 0, 10
  
  local current_page = props["page_index"].Value
  
  if current_page == 1 then --Setup
    layout["Discover"] = 
    {
      Position = {x, y},
      Size = {60,40},
      Style = "Button",
      Legend = "Discover",
      FontSize = 14,
    }
    y = y + 60
    layout["Discovered Devices"] = 
    {
      Position = {x, y},
      Size = {300,300},
      Style = "Text",
      Legend = "Discovered Devices",
      HTextAlign = "Left",
      VTextAlign = "Top",
      FontSize = 12,
    }
  else 
    local index = current_page - 1
    table.insert(
      graphics,
      {
        Type = "GroupBox",
        Position = {x, y},
        Size = {200,100},
        Text = "Connection",
        FontSize = 12,
      }
    )
    x = 10
    y = 20
    table.insert(
      graphics,
      {
        Type = "GroupBox",
        Position = {x, y},
        Size = {75,20},
        Text = "IP Address",
        FontSize = 12,
      }
    )
    layout["Device_" .. index .. "_IP"] = 
    {
      Position = {x, y + 20},
      Size = {75,20},
      Style = "Text",
      FontSize = 12,
    }
    x = x + 85
    table.insert(
      graphics,
      {
        Type = "GroupBox",
        Position = {x, y},
        Size = {100,20},
        Text = "Status",
        FontSize = 12,
      }
    )
    layout["Device_" .. index .. "_Status"] = 
    {
      Position = {x, y + 20},
      Size = {100,20},
      Style = "Text",
      FontSize = 12,
    }
    table.insert(
      graphics,
      {
        Type = "GroupBox",
        Position = {x, y},
        Size = {100,20},
        Text = "Control",
        FontSize = 12,
      }
    )
  end
  return layout, graphics
end

--Start event based logic
if Controls then
  rapidjson = require("rapidjson")
  
    function decode(buf, udp)
      local ascii = ""
      local hex = ""
      -- Decryption key is -85 (256-85=171)
      local key = 171
      -- Decrypt Autokey XOR
      -- Skip first 4 bytes (header)
      for index = (udp and 1 or 5), #buf do
        local c = buf:byte(index)
        -- XOR first byte with key
        d = c ~ key
        -- Use byte as next key
        key = c
        hex = hex .. string.format("%x ", d)
        -- Convert to printable characters
        if d >= 0x20 and d <= 0x7E then
          ascii = ascii .. string.format("%c", d)
        else
          -- Use dot for non-printable bytes
          ascii = ascii .. "."
        end
      end
      -- print(hex)
      -- print(ascii)
      return rapidjson.decode(ascii)
    end 
    function decodeToString(buf, udp)
      local ascii = ""
      local hex = ""
      -- Decryption key is -85 (256-85=171)
      local key = 171
      -- Decrypt Autokey XOR
      -- Skip first 4 bytes (header)
      for index = (udp and 1 or 5), #buf do
        local c = buf:byte(index)
        -- XOR first byte with key
        d = c ~ key
        -- Use byte as next key
        key = c
        hex = hex .. string.format("%x ", d)
        -- Convert to printable characters
        if d >= 0x20 and d <= 0x7E then
          ascii = ascii .. string.format("%c", d)
        else
          -- Use dot for non-printable bytes
          ascii = ascii .. "."
        end
      end
      -- print(hex)
      -- print(ascii)
      -- return rapidjson.decode(ascii)
      return ascii
    end 
    
    function encode(message)
      local key = 171
      result = string.pack(">I",#message)
      for i = 1, #message do 
        a = key ~ message:byte(i)
        key = a
        result = result .. string.char(a)
      end 
      return result
    end 
  
  local DiscoveredDevices = {}
  
  function RenderDiscoveredDevices()
    Controls["Discovered Devices"].String = ""
    local toPrint = ""
    for _, device in pairs(DiscoveredDevices) do
      toPrint = toPrint..device.alias.."["..device.model.."] - "..device.ip.."\n"
    end
    Controls["Discovered Devices"].String = toPrint
  end
  
  DiscoverySocket = UdpSocket.New()
  DiscoverySocket.EventHandler = function(socket, packet)  
    data = decode(packet.Data,true)
    if data.system.get_sysinfo.alias then 
      -- print(decodeToString(packet.Data,true))
      print(data.system.get_sysinfo.alias.."["..data.system.get_sysinfo.model.."] - "..packet.Address)
      if DiscoveredDevices[data.system.get_sysinfo.mac] == nil then
        DiscoveredDevices[data.system.get_sysinfo.mac] = {}
      end
      DiscoveredDevices[data.system.get_sysinfo.mac].alias = data.system.get_sysinfo.alias
      DiscoveredDevices[data.system.get_sysinfo.mac].model = data.system.get_sysinfo.model
      DiscoveredDevices[data.system.get_sysinfo.mac].ip = packet.Address
    end 
    RenderDiscoveredDevices()
  end 
  
  DiscoverySocket:Open("",9999)
  Controls.Discover.EventHandler = function()
    print("Sending Discovery packet")
    DiscoveredDevices = {}
    RenderDiscoveredDevices()
    DiscoverySocket:Send("255.255.255.255",9999,"\xd0\xf2\x81\xf8\x8b\xff\x9a\xf7\xd5\xef\x94\xb6\xd1\xb4\xc0\x9f\xec\x95\xe6\x8f\xe1\x87\xe8\xca\xf0\x8b\xf6\x8b\xf6")
  end 
end
