PluginInfo = {
  Name = "TP-Link Kasa",
  Author = "Eugene Dunn",
  BuildVersion = "0.5.3.0",
  Version = "0.5.3.0",
  Id = "ae99e75d-3c3f-4f13-97eb-7443f56cf23e",
  Description = ""
}
local Colors = {
  White = {255, 255, 255},
  Black = {0, 0, 0},
  Red = {255, 0, 0},
  Green = {0, 255, 0},
  Blue = {0, 0, 255},
  Gray = {136, 136, 136},
  LightGray = {51, 51, 51},
  KasaBlue = {74, 203, 214},
  PluginColor = {74, 203, 214}
}

local MaxDevices = 24

-- Define the color of the plugin object in the design
function GetColor(props)
  return Colors.PluginColor
end

-- The name that will initially display when dragged into a design
function GetPrettyName(props)
  return PluginInfo.Name .. "\r" .. PluginInfo.BuildVersion
  -- return "Vaddio" .. props["Model"].Value .. " " .. PluginInfo.Version
end

-- Optional function used if plugin has multiple pages
PageNames = {"Setup","Loads","Discovery"} --List the pages within the plugin
function GetPages(props)
  local pages = {}
  if props["Energy Monitoring"].Value then
    -- table.insert(PageNames, "Energy Graph",3)
  end
  for ix,name in ipairs(PageNames) do
    table.insert(pages, {name = PageNames[ix]})
  end
  return pages
end

-- Define User configurable Properties of the plugin
function GetProperties()
  local props = {}
  -- table.insert(
  --   props,
  --   {
  --     Name = "Number Of Single Endpoints",
  --     Type = "integer",
  --     Min = 0,
  --     Max = MaxDevices,
  --     Value = 1
  --   }
  -- )
  -- table.insert(
  --   props,
  --   {
  --     Name = "Number Of Multi Endpoints",
  --     Type = "integer",
  --     Min = 0,
  --     Max = MaxDevices,
  --     Value = 0
  --   }
  -- )
  table.insert(
    props,
    {
      Name = "Device Type",
      Type = "enum",
      Choices = {"Switch", "Dimmer", "Strip"},
      Value = "Switch"
    }
  )
  table.insert(
    props,
    {
      Name = "Energy Monitoring",
      Type = "boolean",
      Value = false
    }
  )
  table.insert(
    props,
    {
      Name = "Number Of Outputs",
      Type = "integer",
      Min = 2,
      Max = 6,
      Value = 2
    }
  )
  table.insert(
    props,
    {
      Name = "Poll Time",
      Comment = "Time in seconds between polling the devices",
      Type = "integer",
      Min = 1,
      Max = 60,
      Value = 5
    }
  )
  table.insert(
    props,
    {
      Name = "Debug Print",
      Type = "enum",
      Choices = {"None", "Tx/Rx", "Tx", "Rx", "Function Calls", "All"},
      Value = "None"
    }
  )
  return props
end

-- Optional function to define pins on the plugin that are not connected to a Control
function GetPins(props)
  local pins = {}
  return pins
end

-- Optional function to update available properties when properties are altered by the user
function RectifyProperties(props)
  if props.plugin_show_debug.Value == false then 
    props["Debug Print"].IsHidden = true 
  end
  props["Energy Monitoring"].IsHidden = props["Device Type"].Value == "Dimmer" 
  props["Number Of Outputs"].IsHidden = props["Device Type"].Value ~= "Strip"
  return props
end

-- Optional function to define components used within the plugin
function GetComponents(props)
  local components = {}
  return components
end

-- Optional function to define wiring of components used within the plugin
function GetWiring(props)
  local wiring = {}
  return wiring
end

-- Defines the Controls used within the plugin
function GetControls(props)
  local ctrls = {}
  -- table.insert(ctrls,{Name = "code",ControlType = "Text",PinStyle = "Input",Count = 1})
  local outputCount = props["Device Type"].Value == "Strip" and props["Number Of Outputs"].Value or 1
  
  table.insert(
    ctrls,
    {
      Name = "Discover",
      ControlType = "Button",
      ButtonType = "Trigger",
      PinStyle = "Input",
      UserPin = true
    }
  )
  
  table.insert(
    ctrls,
    {
      Name = "Discovered Devices",
      ControlType = "Indicator",
      IndicatorType = "Text",
      PinStyle = "Output",
      UserPin = true
    }
  )
  
  table.insert(
    ctrls,
    {
      Name = "IPAddress",
      ControlType = "Text",
      PinStyle = "Both",
      UserPin = true
    }
  )
  table.insert(
    ctrls,
    {
      Name = "Status",
      ControlType = "Indicator",
      IndicatorType = Reflect and "StatusGP" or "Status",
      PinStyle = "Output",
      UserPin = true
    }
  )
  
  table.insert(
    ctrls,
    {
      Name = "Name",
      ControlType = "Text",
      PinStyle = "Both",
      UserPin = true
    }
  )
  table.insert(
    ctrls,
    {
      Name = "Model",
      ControlType = "Indicator",
      IndicatorType = "Text",
      PinStyle = "Output",
      UserPin = true
    }
  )
  table.insert(
    ctrls,
    {
      Name = "MACAddress",
      ControlType = "Indicator",
      IndicatorType = "Text",
      PinStyle = "Output",
      UserPin = true
    }
  )
  table.insert(
    ctrls,
    {
      Name = "DeviceFirmware",
      ControlType = "Indicator",
      IndicatorType = "Text",
      PinStyle = "Output",
      UserPin = true
    }
  )
  table.insert(
    ctrls,
    {
      Name = "Rssi",
      ControlType = "Indicator",
      IndicatorType = "Text",
      PinStyle = "Output",
      UserPin = true
    }
  )
  if props["Energy Monitoring"].Value then
    table.insert(
      ctrls,
      {
        Name = "Voltage",
        ControlType = "Indicator",
        IndicatorType = "Text",
        PinStyle = "Output",
        UserPin = true,
        Count = outputCount
      }
    )
    table.insert(
      ctrls,
      {
        Name = "Current",
        ControlType = "Indicator",
        IndicatorType = "Text",
        PinStyle = "Output",
        UserPin = true,
        Count = outputCount
      }
    )
    table.insert(
      ctrls,
      {
        Name = "Power",
        ControlType = "Indicator",
        IndicatorType = "Text",
        PinStyle = "Output",
        UserPin = true,
        Count = outputCount
      }
    )
  end
  
  table.insert(
    ctrls,
    {
      Name = "On",
      ControlType = "Button",
      ButtonType = "Toggle",
      PinStyle = "Both",
      UserPin = true,
      Count = outputCount
    }
  )
  table.insert(
    ctrls,
    {
      Name = "Off",
      ControlType = "Button",
      ButtonType = "Toggle",
      PinStyle = "Both",
      UserPin = true,
      Count = outputCount
    }
  )
  table.insert(
    ctrls,
    {
      Name = "Toggle",
      ControlType = "Button",
      ButtonType = "Toggle",
      PinStyle = "Both",
      UserPin = true,
      Count = outputCount
    }
  )
  if props["Device Type"].Value == "Dimmer" then
    table.insert(
      ctrls,
      {
        Name = "Brightness",
        ControlType = "Knob",
        ControlUnit = "Percent",
        Min = 1,
        Max = 100,
        PinStyle = "Both",
        UserPin = true
      }
    )
  end
  if props["Device Type"].Value == "Strip" then
    table.insert(
      ctrls,
      {
        Name = "PlugName",
        ControlType = "Text",
        PinStyle = "Both",
        UserPin = true,
        Count = outputCount
      }
    )
  end
  return ctrls
end

--Layout of controls and graphics for the plugin UI to display
function GetControlLayout(props)
  local layout = {}
  local graphics = {}
  -- layout["code"] = {PrettyName = "Code",Style = "None"}
  
  local x, y = 0, 10
  
  local current_page = props["page_index"].Value
  local deviceType = props["Device Type"].Value
  
  if current_page == 3 then --Discover
    layout["Discover"] = {
      Position = {x, y},
      Size = {60, 40},
      Style = "Button",
      Legend = "Discover",
      FontSize = 14
    }
    y = y + 60
    layout["Discovered Devices"] = {
      Position = {x, y},
      Size = {300, 300},
      Style = "Text",
      Legend = "Discovered Devices",
      HTextAlign = "Left",
      VTextAlign = "Top",
      FontSize = 12
    }
  elseif current_page == 1 then --Setup
    table.insert(
      graphics,
      {
        Type = "Label",
        Text = "IP Address:",
        Position = {x, y},
        Size = {100, 16},
        HTextAlign = "Right",
        FontSize = 12
      }
    )
    x = x + 100
    layout["IPAddress"] = {
      Position = {x, y},
      Size = {200, 16},
      Style = "Text",
    }
    x = 0
    y = y + 20
    table.insert(
      graphics,
      {
        Type = "Label",
        Text = "Status:",
        Position = {x, y},
        Size = {100, 16},
        HTextAlign = "Right",
        FontSize = 12
      }
    )
    x = x + 100
    layout["Status"] = {
      Position = {x, y},
      Size = {200, 16},
      Style = "Text",
    }
    x = 0
    y = y + 20
    table.insert(
      graphics,
      {
        Type = "Label",
        Text = "Name:",
        Position = {x, y},
        Size = {100, 16},
        HTextAlign = "Right",
        FontSize = 12
      }
    )
    x = x + 100
    layout["Name"] = {
      Position = {x, y},
      Size = {200, 16},
      Style = "Text",
    }
    x = 0
    y = y + 20
    table.insert(
      graphics,
      {
        Type = "Label",
        Text = "Model:",
        Position = {x, y},
        Size = {100, 16},
        HTextAlign = "Right",
        FontSize = 12
      }
    )
    x = x + 100
    layout["Model"] = {
      Position = {x, y},
      Size = {200, 16},
      Style = "Text",
    }
    x = 0
    y = y + 20
    table.insert(
      graphics,
      {
        Type = "Label",
        Text = "MAC Address:",
        Position = {x, y},
        Size = {100, 16},
        HTextAlign = "Right",
        FontSize = 12
      }
    )
    x = x + 100
    layout["MACAddress"] = {
      Position = {x, y},
      Size = {200, 16},
      Style = "Text",
    }
    x = 0
    y = y + 20
    table.insert(
      graphics,
      {
        Type = "Label",
        Text = "Device Firmware:",
        Position = {x, y},
        Size = {100, 16},
        HTextAlign = "Right",
        FontSize = 12
      }
    )
    x = x + 100
    layout["DeviceFirmware"] = {
      Position = {x, y},
      Size = {200, 16},
      Style = "Text",
    }
    x = 0
    y = y + 20
    table.insert(
      graphics,
      {
        Type = "Label",
        Text = "RSSI:",
        Position = {x, y},
        Size = {100, 16},
        HTextAlign = "Right",
        FontSize = 12
      }
    )
    x = x + 100
    layout["Rssi"] = {
      Position = {x, y},
      Size = {200, 16},
      Style = "Text",
    }
  elseif current_page == 2 then -- Loads
    if props["Device Type"].Value == "Strip" then
      for p = 1, props["Number Of Outputs"].Value do
        x = 0
        table.insert(
          graphics,
          {
            Type = "Label",
            Text = p..":",
            Position = {x, y},
            Size = {24,16},
            FontSize = 12,
            HTextAlign = "Right"
          }
        )
        x = x + 24
        layout["PlugName "..p] = {
          Position = {x, y},
          Size = {50, 16},
          Style = "Text",
        }
        x = x + 50
        layout["Off "..p] = {
          Position = {x, y},
          Size = {36,16},
          Style = "Button",
          ButtonStyle = "Toggle",
          Legend = "Off",
          FontSize = 9
        }
        x = x + 36
        layout["On "..p] = {
          Position = {x, y},
          Size = {36,16},
          Style = "Button",
          ButtonStyle = "Toggle",
          Legend = "On",
          FontSize = 9
        }
        x = x + 36
        layout["Toggle "..p] = {
          Position = {x, y},
          Size = {36,16},
          Style = "Button",
          ButtonStyle = "Toggle",
          Legend = "Toggle",
          FontSize = 9
        }
        if props["Energy Monitoring"].Value then
          x = x + 36
          layout["Voltage "..p] = {
            Position = {x, y},
            Size = {50, 16},
            Style = "Text",
          }
          x = x + 50
          layout["Current "..p] = {
            Position = {x, y},
            Size = {50, 16},
            Style = "Text",
          }
          x = x + 50
          layout["Power "..p] = {
            Position = {x, y},
            Size = {50, 16},
            Style = "Text",
          }
        end
        y = y + 20
      end
    else
      layout["Off"] = {
        Position = {x, y},
        Size = {60, 40},
        Style = "Button",
        ButtonStyle = "Toggle",
        Legend = "Off",
        FontSize = 14
      }
      x = x + 64
      layout["On"] = {
        Position = {x, y},
        Size = {60, 40},
        Style = "Button",
        ButtonStyle = "Toggle",
        Legend = "On",
        FontSize = 14
      }
      x = x + 64
      layout["Toggle"] = {
        Position = {x, y},
        Size = {60, 40},
        Style = "Button",
        ButtonStyle = "Toggle",
        Legend = "Toggle",
        FontSize = 14
      }
      x = 0
      y = y + 64
      if props["Device Type"].Value == "Dimmer" then
        layout["Brightness"] = {
          Position = {x, y},
          Size = {188, 40},
          Style = "Fader",
        }
        y = y + 44
      end
      if props["Energy Monitoring"].Value then
        table.insert(
          graphics,
          {
            Type = "Label",
            Text = "Voltage:",
            Position = {x, y},
            Size = {50, 16},
            HTextAlign = "Right",
            FontSize = 12
          }
        )
        x = x + 50
        layout["Voltage"] = {
          Position = {x, y},
          Size = {50, 16},
          Style = "Text",
        }
        x = 0
        y = y + 20
        table.insert(
          graphics,
          {
            Type = "Label",
            Text = "Current:",
            Position = {x, y},
            Size = {50, 16},
            HTextAlign = "Right",
            FontSize = 12
          }
        )
        x = x + 50
        layout["Current"] = {
          Position = {x, y},
          Size = {50, 16},
          Style = "Text",
        }
        x = 0
        y = y + 20
        table.insert(
          graphics,
          {
            Type = "Label",
            Text = "Power:",
            Position = {x, y},
            Size = {50, 16},
            HTextAlign = "Right",
            FontSize = 12
          }
        )
        x = x + 50
        layout["Power"] = {
          Position = {x, y},
          Size = {50, 16},
          Style = "Text",
        }
  
      end
    end
  
    
    
  
  end
  return layout, graphics
end

--Start event based logic
if Controls then
rapidjson = require("rapidjson")

DeviceType = Properties["Device Type"].Value
isStrip = DeviceType == "Strip"
EnergyMonitoring = DeviceType ~= "Dimmer" and Properties["Energy Monitoring"].Value or false

DebugTx, DebugRx, DebugFunction = false, false, false
DebugPrint = Properties["Debug Print"].Value
if DebugPrint == "Tx/Rx" then
  DebugTx, DebugRx = true, true
elseif DebugPrint == "Tx" then
  DebugTx = true
elseif DebugPrint == "Rx" then
  DebugRx = true
elseif DebugPrint == "Function Calls" then
  DebugFunction = true
elseif DebugPrint == "All" then
  DebugTx, DebugRx, DebugFunction = true, true, true
end

StatusState = {OK = 0, COMPROMISED = 1, FAULT = 2, NOTPRESENT = 3, MISSING = 4, INITIALIZING = 5}

function decode(buf, udp)
  local ascii = ""
  -- local hex = ""
  -- Decryption key is -85 (256-85=171)
  local key = 171
  -- Decrypt Autokey XOR
  -- Skip first 4 bytes (header)
  for index = (udp and 1 or 5), #buf do
    local c = buf:byte(index)
    -- XOR first byte with key
    d = c ~ key
    -- Use byte as next key
    key = c
    -- hex = hex .. string.format("%x ", d)
    -- Convert to printable characters
    if d >= 0x20 and d <= 0x7E then
      ascii = ascii .. string.format("%c", d)
    else
      -- Use dot for non-printable bytes
      ascii = ascii .. "."
    end
  end
  -- print(hex)
  -- print(ascii)
  return rapidjson.decode(ascii)
end 
function decodeToString(buf, udp)
  local ascii = ""
  -- local hex = ""
  -- Decryption key is -85 (256-85=171)
  local key = 171
  -- Decrypt Autokey XOR
  -- Skip first 4 bytes (header)
  for index = (udp and 1 or 5), #buf do
    local c = buf:byte(index)
    -- XOR first byte with key
    d = c ~ key
    -- Use byte as next key
    key = c
    -- hex = hex .. string.format("%x ", d)
    -- Convert to printable characters
    if d >= 0x20 and d <= 0x7E then
      ascii = ascii .. string.format("%c", d)
    else
      -- Use dot for non-printable bytes
      ascii = ascii .. "."
    end
  end
  -- print(hex)
  -- print(ascii)
  -- return rapidjson.decode(ascii)
  return ascii
end 

function encode(message)
  local key = 171
  result = string.pack(">I",#message)
  for i = 1, #message do 
    a = key ~ message:byte(i)
    key = a
    result = result .. string.char(a)
  end 
  return result
end 
local DiscoveredDevices = {}

function RenderDiscoveredDevices()
  Controls["Discovered Devices"].String = ""
  local toPrint = ""
  for _, device in pairs(DiscoveredDevices) do
    toPrint = toPrint..device.alias.."["..device.model.."] - "..device.ip.."\n"
  end
  Controls["Discovered Devices"].String = toPrint
end

DiscoverySocket = UdpSocket.New()
DiscoverySocket.EventHandler = function(socket, packet)  
  data = decode(packet.Data,true)
  if data.system.get_sysinfo.alias then 
    print(decodeToString(packet.Data,true))
    print(data.system.get_sysinfo.alias.."["..data.system.get_sysinfo.model.."] - "..packet.Address)
    if DiscoveredDevices[data.system.get_sysinfo.mac] == nil then
      DiscoveredDevices[data.system.get_sysinfo.mac] = {}
    end
    DiscoveredDevices[data.system.get_sysinfo.mac].alias = data.system.get_sysinfo.alias
    DiscoveredDevices[data.system.get_sysinfo.mac].model = data.system.get_sysinfo.model
    DiscoveredDevices[data.system.get_sysinfo.mac].ip = packet.Address
  end 
  RenderDiscoveredDevices()
end 


Controls.Discover.EventHandler = function()
  DiscoverySocket:Open("",9999)
  print("Sending Discovery packet")
  DiscoveredDevices = {}
  RenderDiscoveredDevices()
  -- DiscoverySocket:Send("255.255.255.255",9999,"\xd0\xf2\x81\xf8\x8b\xff\x9a\xf7\xd5\xef\x94\xb6\xd1\xb4\xc0\x9f\xec\x95\xe6\x8f\xe1\x87\xe8\xca\xf0\x8b\xf6\x8b\xf6")
  for _,interface in pairs(Network.Interfaces()) do 
    DiscoverySocket:Send(interface.BroadcastAddress,9999,"\xd0\xf2\x81\xf8\x8b\xff\x9a\xf7\xd5\xef\x94\xb6\xd1\xb4\xc0\x9f\xec\x95\xe6\x8f\xe1\x87\xe8\xca\xf0\x8b\xf6\x8b\xf6")
  end 
  Timer.CallAfter(function()
    DiscoverySocket:Close()
  end, 5
    )
end 
Socket = TcpSocket.New()
PollTimer = Timer.New()
FaderDebounce = Timer.New()
PollTime = Properties["Poll Time"].Value
Buffer = ""
LastPacketErr = false
Info = {}
Energy = {}

PollTimer.EventHandler = function()
  DevicePoll()
end
Socket.EventHandler = function(socket, event, err)
  -- print(event)
  if event == TcpSocket.Events.Data then
    -- print("got " .. socket.BufferLength .. " bytes")
    Buffer = Buffer .. socket:Read(socket.BufferLength)
    local jsonData, err = nil, nil
    local success, pcallError = pcall(function() jsonData, err = decode(Buffer) end)
    if not success then
      print("Error: " .. pcallError)
      print("Buffer Length: " .. #Buffer)
      Buffer = ""
      LastPacketErr = false
    
    elseif err == nil then
      -- print("JSON OK, " .. #Buffer .. " bytes")
      Buffer = ""
      LastPacketErr = false
      if DebugRx then
        print("RX:\n" .. rapidjson.encode(jsonData))
      end
      if jsonData.system then
        if jsonData.system.get_sysinfo then
          if jsonData.system.get_sysinfo.err_code == 0 then
            Controls["Status"].Value = 0 --ok
            Controls["Status"].String = ""
          end
          parseGetInfo(jsonData.system.get_sysinfo)
        elseif jsonData.system.set_relay_state then
          DevicePoll()
        end
      elseif jsonData["smartlife.iot.dimmer"] then -- Dimmer response
        -- Poll()
      elseif jsonData.emeter then -- Energy info
        if jsonData.emeter.get_realtime and EnergyMonitoring then -- Realtime energy info
          parseEnergyInfo(jsonData.emeter.get_realtime)
        end
      else
        print("Unknown JSON")
        print(rapidjson.encode(jsonData))
      end
    elseif not LastPacketErr then
      LastPacketErr = true
      -- print("incomplete Packet")
    else
      -- end
      -- Controls["Device_" .. x .. "_Status"].Value = 2 --fault
      -- Controls["Device_" .. x .. "_Status"].String = "JSON Error: ", err
      -- print("JSON Err:", err)
      print("strikeout")
      print(decodeToString(Buffer))
      -- if err:find("The document root must not be followed by other values") then
      Buffer = ""
      LastPacketErr = false
    end
  elseif event == TcpSocket.Events.Connected then
    DevicePoll()
    PollTimer:Start(PollTime)
    Buffer = ""
    LastPacketErr = false
  else
    PollTimer:Stop()
    Controls["Status"].Value = 4 --missing
    Controls["Status"].String = event
  end
end

Controls["IPAddress"].EventHandler = function(ctrl)
  DeviceDisconnect()
  DeviceConnect()
end
if isStrip then
  for p = 1, Properties["Number Of Outputs"].Value do
    Controls["On"][p].EventHandler = function(ctrl)
      if
        Socket.IsConnected and Info.deviceId ~= nil and Info.children ~= nil and Info.children[p] ~= nil and
          Info.children[p].id ~= nil
       then
        local childID = #Info.children[p].id > 2 and Info.children[p].id or Info.deviceId .. Info.children[p].id
        if DebugTx then
          print(
            "Plug " ..
              p .. " TX: " .. '{"context":{"child_ids":["' .. childID .. '"]},"system":{"set_relay_state":{"state":1}}}'
          )
        end
        Socket:Write(encode('{"context":{"child_ids":["' .. childID .. '"]},"system":{"set_relay_state":{"state":1}}}'))
      end
    end
    Controls["Off"][p].EventHandler = function(ctrl)
      if
        Socket.IsConnected and Info.deviceId ~= nil and Info.children ~= nil and Info.children[p] ~= nil and
          Info.children[p].id ~= nil
       then
        local childID = #Info.children[p].id > 2 and Info.children[p].id or Info.deviceId .. Info.children[p].id
        if DebugTx then
          print(
            "Plug " ..
              p .. " TX: " .. '{"context":{"child_ids":["' .. childID .. '"]},"system":{"set_relay_state":{"state":0}}}'
          )
        end
        Socket:Write(encode('{"context":{"child_ids":["' .. childID .. '"]},"system":{"set_relay_state":{"state":0}}}'))
      end
    end
    Controls["Toggle"][p].EventHandler = function(ctrl)
      if
        Socket.IsConnected and Info.deviceId ~= nil and Info.children ~= nil and Info.children[p] ~= nil and
          Info.children[p].id ~= nil
       then
        local childID = #Info.children[p].id > 2 and Info.children[p].id or Info.deviceId .. Info.children[p].id
        if DebugTx then
          print(
            "Plug " ..
              p ..
                " TX: " ..
                  '{"context":{"child_ids":["' ..
                    childID .. '"]},"system":{"set_relay_state":{"state":' .. (ctrl.Boolean and 1 or 0) .. "}}}"
          )
        end
        Socket:Write(
          encode(
            '{"context":{"child_ids":["' ..
              childID .. '"]},"system":{"set_relay_state":{"state":' .. (ctrl.Boolean and 1 or 0) .. "}}}"
          )
        )
      end
    end
    Controls["PlugName"][p].EventHandler = function(ctrl)
      if
        Socket.IsConnected and Info.deviceId ~= nil and Info.children ~= nil and Info.children[p] ~= nil and
          Info.children[p].id ~= nil
       then
        local childID = #Info.children[p].id > 2 and Info.children[p].id or Info.deviceId .. Info.children[p].id
        if DebugTx then
          print(
            "Plug " ..
              p ..
                " TX: " ..
                  '{"context":{"child_ids":["' ..
                    childID .. '"]},"system":{"set_dev_alias":{"alias":"' .. ctrl.String .. '"}}}'
          )
        end
        Socket:Write(
          encode(
            '{"context":{"child_ids":["' ..
              childID .. '"]},"system":{"set_dev_alias":{"alias":"' .. ctrl.String .. '"}}}'
          )
        )
      end
    end
  end
else -- single load
  Controls["On"].EventHandler = function(ctrl)
    if Socket.IsConnected then
      if DebugTx then
        print("TX: " .. '{ "system":{ "set_relay_state":{ "state":1 } } }')
      end
      Socket:Write(encode('{ "system":{ "set_relay_state":{ "state":1 } } }'))
    end
  end
  Controls["Off"].EventHandler = function(ctrl)
    if Socket.IsConnected then
      if DebugTx then
        print("TX: " .. '{ "system":{ "set_relay_state":{ "state":0 } } }')
      end
      Socket:Write(encode('{ "system":{ "set_relay_state":{ "state":0 } } }'))
    end
  end
  Controls["Toggle"].EventHandler = function(ctrl)
    if Socket.IsConnected then
      if DebugTx then
        print(
          "Device" ..
            x .. " TX: " .. '{ "system":{ "set_relay_state":{ "state":' .. (ctrl.Boolean and 1 or 0) .. " } } }"
        )
      end
      Socket:Write(encode('{ "system":{ "set_relay_state":{ "state":' .. (ctrl.Boolean and 1 or 0) .. " } } }"))
    end
  end
end
if DeviceType == "Dimmer" then
  Controls["Brightness"].EventHandler = function(ctrl)
    FaderDebounce:Stop()
    FaderDebounce:Start(0.1)
  end
  FaderDebounce.EventHandler = function()
    FaderDebounce:Stop()
    if Socket.IsConnected then
      val = math.floor(Controls["Brightness"].Value)
      if DebugTx then
        print("TX: " .. '{ "smartlife.iot.dimmer":{ "set_brightness":{ "brightness":' .. val .. " } } }")
      end
      Socket:Write(encode('{ "smartlife.iot.dimmer":{ "set_brightness":{ "brightness":' .. val .. " } } }"))
    end
  end
end
Controls["Name"].EventHandler = function(ctrl)
  if Socket.IsConnected then
    if DebugTx then
      print("TX: " .. '{ "system":{ "set_dev_alias":{ "alias":"' .. ctrl.String .. '" } } }')
    end
    Socket:Write(encode('{ "system":{ "set_dev_alias":{ "alias":"' .. ctrl.String .. '" } } }'))
  end
end

function ClearVariables()
  if isStrip then
    for p = 1, Properties["Number Of Outputs"].Value do
      Controls["On"][p].Boolean = false
      Controls["Off"][p].Boolean = false
      Controls["Toggle"][p].Boolean = false
      Controls["PlugName"][p].String = ""
      if EnergyMonitoring then
        Controls["Voltage"][p].String = ""
        Controls["Current"][p].String = ""
        Controls["Power"][p].String = ""
      end
    end
  else
    Controls["On"].Boolean = false
    Controls["Off"].Boolean = false
    Controls["Toggle"].Boolean = false
    if DeviceType == "Dimmer" then
      Controls["Brightness"].Value = 0
    end
    if EnergyMonitoring then
      Controls["Voltage"].String = ""
      Controls["Current"].String = ""
      Controls["Power"].String = ""
    end
  end
  Controls["Status"].Value = 3
  Controls["Status"].String = ""
  Controls["Name"].String = ""
  Controls["Model"].String = ""
  Controls["MACAddress"].String = ""
  Controls["DeviceFirmware"].String = ""
  Controls["Rssi"].String = ""
end

function DeviceConnect()
  local ip = Controls["IPAddress"].String
  PollTimer:Stop()
  Buffer = ""
  LastPacketErr = false
  Info = {}
  Energy = {}
  if ip ~= nil and ip ~= "" then
    Socket:Connect(ip, 9999)
  else
    ClearVariables()
    Controls["Status"].Value = 3 --not present
    Controls["Status"].String = "No IP Address"
  end
end
function DeviceDisconnect(index)
  PollTimer:Stop()
  Socket:Disconnect()
  -- Controls["Status"].Value = 3 --not present
  -- Controls["Status"].String = "Disconnected"
end
function DevicePoll()
  if Socket.IsConnected then
    if DebugTx then
      print("TX: " .. '{ "system":{ "get_sysinfo":null } }')
    end
    Socket:Write(encode('{ "system":{ "get_sysinfo":null } }'))

    if EnergyMonitoring and Info.feature ~= nil and Info.feature:find("ENE") then
      if isStrip then
        for p = 1, Properties["Number Of Outputs"].Value do
          if Info.children ~= nil and Info.children[p] ~= nil then
            local childID = #Info.children[p].id > 2 and Info.children[p].id or Info.deviceId .. Info.children[p].id
            Timer.CallAfter(
              function()
                if DebugTx then
                  print(
                    "Plug " ..
                      p .. " TX: " .. '{"context":{"child_ids":["' .. childID .. '"]},"emeter":{"get_realtime":{}}}'
                  )
                end
                Socket:Write(encode('{"context":{"child_ids":["' .. childID .. '"]},"emeter":{"get_realtime":{}}}'))
              end,
              (.1 * p)
            )
          end
        end
      else
        Timer.CallAfter(
          function()
            if DebugTx then
              print("TX: " .. '{"emeter":{"get_realtime":{}}}')
            end
            Socket:Write(encode('{"emeter":{"get_realtime":{}}}'))
          end,
          0.1
        )
      end
    end
  end
end

function parseGetInfo(data)
  -- Device Info
  if data.alias then
    Controls["Name"].String = data.alias
    Info.alias = data.alias
  end
  if data.model then
    Controls["Model"].String = data.model
    Info.model = data.model
  end
  if data.mac then
    Controls["MACAddress"].String = data.mac
    Info.mac = data.mac
  end
  if data.sw_ver then
    Controls["DeviceFirmware"].String = data.hw_ver
    Info.sw_ver = data.sw_ver
  end
  if data.rssi then
    Controls["Rssi"].String = data.rssi
    Info.rssi = data.rssi
  end
  if data.feature then
    Info.feature = data.feature
  end
  if data.deviceId then
    Info.deviceId = data.deviceId
  end
  if data.children then
    Info.children = data.children
    if not isStrip then
      print("ERROR: Device " .. index .. " has children")
    end
  end
  if isStrip then
    if data.child_num > 0 and data.children then
      for _, child in ipairs(data.children) do
        childID = tonumber(child.id:sub(-2)) + 1
        if child.alias then
          Controls["PlugName"][childID].String = child.alias
        end
        if child.state then
          Controls["On"][childID].Boolean = child.state == 1
          Controls["Off"][childID].Boolean = child.state == 0
          Controls["Toggle"][childID].Boolean = child.state == 1
        end
      end
    end
  else
    if DeviceType == "Dimmer" then
      if data.brightness then
        Controls["Brightness"].Value = data.brightness
      end
    end
    if data.relay_state then
      Controls["On"].Boolean = data.relay_state == 1
      Controls["Off"].Boolean = data.relay_state == 0
      Controls["Toggle"].Boolean = data.relay_state == 1
    end
  end
end
function parseEnergyInfo(data)
  if isStrip then
    local p = data.slot_id + 1
    if data.voltage_mv then
      Controls["Voltage"][p].String = data.voltage_mv / 1000 .. " V"
    end
    if data.current_ma then
      Controls["Current"][p].String = data.current_ma / 1000 .. " A"
    end
    if data.power_mw then
      Controls["Power"][p].String = data.power_mw / 1000 .. " W"
    end
  else
    if data.voltage_mv then
      Controls["Voltage"].String = data.voltage_mv / 1000 .. " V"
    end
    if data.current_ma then
      Controls["Current"].String = data.current_ma / 1000 .. " A"
    end
    if data.power_mw then
      Controls["Power"].String = data.power_mw / 1000 .. " W"
    end
  end
end

function Init()
  ClearVariables()
  DeviceConnect()
end

Init()
end
